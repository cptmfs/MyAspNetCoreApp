ViewBag.name = " Asp.Net Core ";  ViewBag bu şekilde veri taşınabiliyor index'lere

ViewData["age"]= 30;   ViewData ise bu syntax ile index'lere veri taşınabiliyor..

ViewData["names"]= new List<string>() { "Ferit", "Şeyma", "Şimşek" }; Buradaki veriyi index'e aktarırken foreach ile tüm elemanlarını dönmesiyle verilere erişiyoruz.

ViewData["names"]' in tipi belirsiz olduğu için index'te ViewData["names"] as List<string> yazıyoruz 

TempData ***  Farklı Actionlardan ulaşılabiliyor en önemli özelliği bu ***

Bİr Layout Tüm cshtml sayfalarında ortak olarak kullanılabilir. 
Eğer bunu değiştirmek istiyorsak yeni bir layout oluştur ve Sonra bunu kullanmak istediğin cshtml'de
kafada bunu tanımla Layout = "yeniLayout"; gibi 

 @RenderBody() --> layout'ın içinde index gibi cshtml'lerin içeriğinin bulundugu alan RenderBody'dir.



 Eğer Layout içerisinde belli bir kısma belli kodları yer almasını istiyorsak layout içerisinde 
 Örn: HEader kısmında         @await RenderSectionAsync("header", required: false) bu kodu yazıyoruz.

 Not: required: false kısmı true olursa , bu Layoutu kullanan tüm sayfalarda özel section kısmı 
 tanımlanmak zorunda olacaktır..
 Sonrasında cshtmlde @@section header
{


}   gibi yazımla bu süslü tırnaklar içerisine yazılanlar layouttaki istediğimiz yere gider.


Örneğin =  Ana layoutun en altında bu kod yer alır @await RenderSectionAsync("Scripts", required: false)

neden çünkü her cshtml de eklenen kodlar @section Scripts {  buraya yazılanlar hepsi layoutda yeri 
gösterilen en alt kısıma eklenecektir..}

NOT : Önce CSS kodları çalışır çünkü kullanıcıya önce görseller gösterilir, sonra kullanıcı herhangi bir
etkilişime geçmesine imkan veren şeyler en altta js dosyalarından gelir..
Performans açısından bu daha iyidir..

--- Partial View ---
Her zaman değil ama ihtiyac duyulan sayfalarda kullanılacak alanlardır..
Örneğin login menu sadece login ekranı ve admin panelinde gözüksün gibi
Social İcons diye bi alan var mesela sadece ana sayfa ve iletişim sayfasında gözüksün isteyebiliriz..


Yazılma Tipleri : 
1-)		<partial name="_MenuPartialView" />
2-)		@await Html.PartialAsync("_MenuPartialView")
3-)		@Html.Partial("_MenuPartialView")

-- Model Bindig -- 

Kullanıcıdan gelen dataların Action methodlarındaki herhangi bir nesneye değişkene atanmasıdır..


--- HTTP GET / HTTP POST ----

Örneğin Ürün ekleme sayfasında , kullanıcı ürün ekleye bastıgında görüntülenecek  sayfayı getiren HTTP GET ,
Kullanıcı Ekle butonuna bastığında olacakları ( veri tabanına ürünü kaydetme gibi ) yapan HTTP POST.

HTTP get ile veri aldıgımızda query de taşır verileri yani https://localhost:7223/Products/SaveProduct?Name=Logitech+G-400S&Price=455&Stock=250&Color=Black gibi..
ve bunun da veri taşıma sınırı var . Bu yüzden ihtiyaç olmadıgı sürece HTTP POST kullanmak gerekiyor . Taşınan verilerin şifrelenmesi için .. 


SONUÇ : Model Binding'de Kullanıcıdan Data Alırken En iyisi HTTP POST ve Tip güvenli olarak almaktır..